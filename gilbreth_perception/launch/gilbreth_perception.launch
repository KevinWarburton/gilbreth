<?xml version="1.0"?>
<launch>
  <arg name="spawn_window" default="false"/>  <!-- run the nodes in their own terminal window -->
  <arg name="terminal_cmd" default="xterm -e" if="$(arg spawn_window)"/>
  <arg name="terminal_cmd" default="" unless="$(arg spawn_window)"/>
  <arg name="cnn" default="true"/><!-- Convolutional Neral Network switch -->

  <remap from="scene_point_cloud" to="/gilbreth/kinect_points"/>
  <node pkg="gilbreth_perception" name="segmentation_node" type="segmentation_node" launch-prefix="$(arg terminal_cmd)" output="screen">
    <rosparam command="load" file="$(find gilbreth_perception)/config/parameters.yaml"/>
  </node>

<!--Using Correspondance Grouping -->
  <group unless="$(arg cnn)">
    <node pkg="gilbreth_perception" name="recognition_node" type="recognition_node" launch-prefix="$(arg terminal_cmd)" output="screen">
      <rosparam command="load" file="$(find gilbreth_perception)/config/model_list.yaml"/>
      <rosparam command="load" file="$(find gilbreth_perception)/config/parameters.yaml"/>
      <param name="package_path" value="$(find gilbreth_perception)"/>
    </node>
  </group>

<!--Using Convolutional Neural Network -->
  <group if="$(arg cnn)">
    <node pkg="gilbreth_perception" name="voxelizer_node" type="voxelizer_node" launch-prefix="$(arg terminal_cmd)" output="screen"/>
    <node pkg="gilbreth_perception" name="alignment_node" type="alignment_node" launch-prefix="$(arg terminal_cmd)" output="screen">
      <rosparam command="load" file="$(find gilbreth_perception)/config/model_list.yaml"/>
      <rosparam command="load" file="$(find gilbreth_perception)/config/parameters.yaml"/>
      <param name="package_path" value="$(find gilbreth_perception)"/>
    </node>
    <node pkg="gilbreth_perception" name="recognition_cnn" type="recognition_cnn.py" launch-prefix="$(arg terminal_cmd)" output="screen">
      <param name="package_path" value="$(find gilbreth_perception)"/>
    </node>
  </group>

</launch>

